var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaPropertyGet, cordovaPropertySet, cordova } from '@ionic-native/core';
;
;
;
;
;
;
;
;
;
;
;
;
var JMChatRoomOriginal = /** @class */ (function () {
    function JMChatRoomOriginal() {
    }
    JMChatRoomOriginal.prototype.getChatRoomInfoListOfApp = function (params, success, fail) { return cordova(this, "getChatRoomInfoListOfApp", {}, arguments); };
    JMChatRoomOriginal.prototype.getChatRoomInfoListOfUser = function (success, fail) { return cordova(this, "getChatRoomInfoListOfUser", {}, arguments); };
    JMChatRoomOriginal.prototype.getChatRoomInfoListById = function (params, success, fail) { return cordova(this, "getChatRoomInfoListById", {}, arguments); };
    JMChatRoomOriginal.prototype.getChatRoomOwner = function (params, success, fail) { return cordova(this, "getChatRoomOwner", {}, arguments); };
    JMChatRoomOriginal.prototype.enterChatRoom = function (obj, success, fail) { return cordova(this, "enterChatRoom", {}, arguments); };
    JMChatRoomOriginal.prototype.exitChatRoom = function (params, success, fail) { return cordova(this, "exitChatRoom", {}, arguments); };
    JMChatRoomOriginal.prototype.getChatRoomConversation = function (params, success, fail) { return cordova(this, "getChatRoomConversation", {}, arguments); };
    JMChatRoomOriginal.prototype.getChatRoomConversationList = function (success, fail) { return cordova(this, "getChatRoomConversationList", {}, arguments); };
    JMChatRoomOriginal.providedIn = "root";
    return JMChatRoomOriginal;
}());
var JMChatRoom = new JMChatRoomOriginal();
export { JMChatRoom };
var JMessagePluginOriginal = /** @class */ (function (_super) {
    __extends(JMessagePluginOriginal, _super);
    function JMessagePluginOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JMessagePluginOriginal.prototype.functionName = function (arg1, arg2) { return cordova(this, "functionName", {}, arguments); };
    JMessagePluginOriginal.prototype.init = function (params) { return cordova(this, "init", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.setDebugMode = function (params) { return cordova(this, "setDebugMode", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.register = function (params) { return cordova(this, "register", {}, arguments); };
    JMessagePluginOriginal.prototype.login = function (params) { return cordova(this, "login", {}, arguments); };
    JMessagePluginOriginal.prototype.logout = function () { return cordova(this, "logout", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.setBadge = function (params) { return cordova(this, "setBadge", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.getMyInfo = function () { return cordova(this, "getMyInfo", {}, arguments); };
    JMessagePluginOriginal.prototype.getUserInfo = function (params) { return cordova(this, "getUserInfo", {}, arguments); };
    JMessagePluginOriginal.prototype.updateMyPassword = function (params) { return cordova(this, "updateMyPassword", {}, arguments); };
    JMessagePluginOriginal.prototype.updateMyAvatar = function (params) { return cordova(this, "updateMyAvatar", {}, arguments); };
    JMessagePluginOriginal.prototype.updateMyInfo = function (params) { return cordova(this, "updateMyInfo", {}, arguments); };
    JMessagePluginOriginal.prototype.updateGroupAvatar = function (params) { return cordova(this, "updateGroupAvatar", {}, arguments); };
    JMessagePluginOriginal.prototype.downloadThumbGroupAvatar = function (params) { return cordova(this, "downloadThumbGroupAvatar", {}, arguments); };
    JMessagePluginOriginal.prototype.downloadOriginalGroupAvatar = function (params) { return cordova(this, "downloadOriginalGroupAvatar", {}, arguments); };
    JMessagePluginOriginal.prototype.setConversationExtras = function (params) { return cordova(this, "setConversationExtras", {}, arguments); };
    JMessagePluginOriginal.prototype.sendTextMessage = function (params) { return cordova(this, "sendTextMessage", {}, arguments); };
    JMessagePluginOriginal.prototype.sendImageMessage = function (params) { return cordova(this, "sendImageMessage", {}, arguments); };
    JMessagePluginOriginal.prototype.sendVoiceMessage = function (params) { return cordova(this, "sendVoiceMessage", {}, arguments); };
    JMessagePluginOriginal.prototype.sendCustomMessage = function (params) { return cordova(this, "sendCustomMessage", {}, arguments); };
    JMessagePluginOriginal.prototype.sendLocationMessage = function (params) { return cordova(this, "sendLocationMessage", {}, arguments); };
    JMessagePluginOriginal.prototype.sendFileMessage = function (params) { return cordova(this, "sendFileMessage", {}, arguments); };
    JMessagePluginOriginal.prototype.retractMessage = function (params) { return cordova(this, "retractMessage", {}, arguments); };
    JMessagePluginOriginal.prototype.getHistoryMessages = function (params) { return cordova(this, "getHistoryMessages", {}, arguments); };
    JMessagePluginOriginal.prototype.getMessageById = function (params) { return cordova(this, "getMessageById", {}, arguments); };
    JMessagePluginOriginal.prototype.deleteMessageById = function (params) { return cordova(this, "deleteMessageById", {}, arguments); };
    JMessagePluginOriginal.prototype.sendInvitationRequest = function (params) { return cordova(this, "sendInvitationRequest", {}, arguments); };
    JMessagePluginOriginal.prototype.acceptInvitation = function (params) { return cordova(this, "acceptInvitation", {}, arguments); };
    JMessagePluginOriginal.prototype.declineInvitation = function (params) { return cordova(this, "declineInvitation", {}, arguments); };
    JMessagePluginOriginal.prototype.removeFromFriendList = function (params) { return cordova(this, "removeFromFriendList", {}, arguments); };
    JMessagePluginOriginal.prototype.updateFriendNoteName = function (params) { return cordova(this, "updateFriendNoteName", {}, arguments); };
    JMessagePluginOriginal.prototype.updateFriendNoteText = function (params) { return cordova(this, "updateFriendNoteText", {}, arguments); };
    JMessagePluginOriginal.prototype.getFriends = function () { return cordova(this, "getFriends", {}, arguments); };
    JMessagePluginOriginal.prototype.createGroup = function (params) { return cordova(this, "createGroup", {}, arguments); };
    JMessagePluginOriginal.prototype.getGroupIds = function () { return cordova(this, "getGroupIds", {}, arguments); };
    JMessagePluginOriginal.prototype.getGroupInfo = function (params) { return cordova(this, "getGroupInfo", {}, arguments); };
    JMessagePluginOriginal.prototype.updateGroupInfo = function (params) { return cordova(this, "updateGroupInfo", {}, arguments); };
    JMessagePluginOriginal.prototype.addGroupMembers = function (params) { return cordova(this, "addGroupMembers", {}, arguments); };
    JMessagePluginOriginal.prototype.removeGroupMembers = function (params) { return cordova(this, "removeGroupMembers", {}, arguments); };
    JMessagePluginOriginal.prototype.exitGroup = function (params) { return cordova(this, "exitGroup", {}, arguments); };
    JMessagePluginOriginal.prototype.getGroupMembers = function (params) { return cordova(this, "getGroupMembers", {}, arguments); };
    JMessagePluginOriginal.prototype.addUsersToBlacklist = function (params) { return cordova(this, "addUsersToBlacklist", {}, arguments); };
    JMessagePluginOriginal.prototype.removeUsersFromBlacklist = function (params) { return cordova(this, "removeUsersFromBlacklist", {}, arguments); };
    JMessagePluginOriginal.prototype.getBlacklist = function () { return cordova(this, "getBlacklist", {}, arguments); };
    JMessagePluginOriginal.prototype.setNoDisturb = function (params) { return cordova(this, "setNoDisturb", {}, arguments); };
    JMessagePluginOriginal.prototype.getNoDisturbList = function () { return cordova(this, "getNoDisturbList", {}, arguments); };
    JMessagePluginOriginal.prototype.setNoDisturbGlobal = function (params) { return cordova(this, "setNoDisturbGlobal", {}, arguments); };
    JMessagePluginOriginal.prototype.isNoDisturbGlobal = function () { return cordova(this, "isNoDisturbGlobal", {}, arguments); };
    JMessagePluginOriginal.prototype.blockGroupMessage = function (params) { return cordova(this, "blockGroupMessage", {}, arguments); };
    JMessagePluginOriginal.prototype.isGroupBlocked = function (params) { return cordova(this, "isGroupBlocked", {}, arguments); };
    JMessagePluginOriginal.prototype.getBlockedGroupList = function () { return cordova(this, "getBlockedGroupList", {}, arguments); };
    JMessagePluginOriginal.prototype.downloadThumbUserAvatar = function (params) { return cordova(this, "downloadThumbUserAvatar", {}, arguments); };
    JMessagePluginOriginal.prototype.downloadOriginalUserAvatar = function (params) { return cordova(this, "downloadOriginalUserAvatar", {}, arguments); };
    JMessagePluginOriginal.prototype.downloadThumbImage = function (params) { return cordova(this, "downloadThumbImage", {}, arguments); };
    JMessagePluginOriginal.prototype.downloadOriginalImage = function (params) { return cordova(this, "downloadOriginalImage", {}, arguments); };
    JMessagePluginOriginal.prototype.downloadVoiceFile = function (params) { return cordova(this, "downloadVoiceFile", {}, arguments); };
    JMessagePluginOriginal.prototype.downloadFile = function (params) { return cordova(this, "downloadFile", {}, arguments); };
    JMessagePluginOriginal.prototype.createConversation = function (params) { return cordova(this, "createConversation", {}, arguments); };
    JMessagePluginOriginal.prototype.deleteConversation = function (params) { return cordova(this, "deleteConversation", {}, arguments); };
    JMessagePluginOriginal.prototype.enterConversation = function (params) { return cordova(this, "enterConversation", {}, arguments); };
    JMessagePluginOriginal.prototype.exitConversation = function (params) { return cordova(this, "exitConversation", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.getConversation = function (params) { return cordova(this, "getConversation", {}, arguments); };
    JMessagePluginOriginal.prototype.getConversations = function () { return cordova(this, "getConversations", {}, arguments); };
    JMessagePluginOriginal.prototype.resetUnreadMessageCount = function (params) { return cordova(this, "resetUnreadMessageCount", {}, arguments); };
    JMessagePluginOriginal.prototype.transferGroupOwner = function (params) { return cordova(this, "transferGroupOwner", {}, arguments); };
    JMessagePluginOriginal.prototype.setGroupMemberSilence = function (params) { return cordova(this, "setGroupMemberSilence", {}, arguments); };
    JMessagePluginOriginal.prototype.isSilenceMember = function (params) { return cordova(this, "isSilenceMember", {}, arguments); };
    JMessagePluginOriginal.prototype.groupSilenceMembers = function (params) { return cordova(this, "groupSilenceMembers", {}, arguments); };
    JMessagePluginOriginal.prototype.setGroupNickname = function (params) { return cordova(this, "setGroupNickname", {}, arguments); };
    JMessagePluginOriginal.prototype.enterChatRoom = function (params) { return cordova(this, "enterChatRoom", {}, arguments); };
    JMessagePluginOriginal.prototype.exitChatRoom = function (params) { return cordova(this, "exitChatRoom", {}, arguments); };
    JMessagePluginOriginal.prototype.getChatRoomConversation = function (params) { return cordova(this, "getChatRoomConversation", {}, arguments); };
    JMessagePluginOriginal.prototype.getChatRoomConversationList = function () { return cordova(this, "getChatRoomConversationList", {}, arguments); };
    JMessagePluginOriginal.prototype.getAllUnreadCount = function () { return cordova(this, "getAllUnreadCount", {}, arguments); };
    JMessagePluginOriginal.prototype.addGroupAdmins = function (params) { return cordova(this, "addGroupAdmins", {}, arguments); };
    JMessagePluginOriginal.prototype.removeGroupAdmins = function (params) { return cordova(this, "removeGroupAdmins", {}, arguments); };
    JMessagePluginOriginal.prototype.changeGroupType = function (params) { return cordova(this, "changeGroupType", {}, arguments); };
    JMessagePluginOriginal.prototype.getPublicGroupInfos = function (params) { return cordova(this, "getPublicGroupInfos", {}, arguments); };
    JMessagePluginOriginal.prototype.applyJoinGroup = function (params) { return cordova(this, "applyJoinGroup", {}, arguments); };
    JMessagePluginOriginal.prototype.processApplyJoinGroup = function (params) { return cordova(this, "processApplyJoinGroup", {}, arguments); };
    JMessagePluginOriginal.prototype.dissolveGroup = function (params) { return cordova(this, "dissolveGroup", {}, arguments); };
    JMessagePluginOriginal.prototype.addReceiveMessageListener = function (params) { return cordova(this, "addReceiveMessageListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeReceiveMessageListener = function (params) { return cordova(this, "removeReceiveMessageListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addClickMessageNotificationListener = function (params) { return cordova(this, "addClickMessageNotificationListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeClickMessageNotificationListener = function (params) { return cordova(this, "removeClickMessageNotificationListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addSyncOfflineMessageListener = function (params) { return cordova(this, "addSyncOfflineMessageListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeSyncOfflineMessageListener = function (params) { return cordova(this, "removeSyncOfflineMessageListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addSyncRoamingMessageListener = function (params) { return cordova(this, "addSyncRoamingMessageListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeSyncRoamingMessageListener = function (params) { return cordova(this, "removeSyncRoamingMessageListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addLoginStateChangedListener = function (params) { return cordova(this, "addLoginStateChangedListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeLoginStateChangedListener = function (params) { return cordova(this, "removeLoginStateChangedListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addContactNotifyListener = function (params) { return cordova(this, "addContactNotifyListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeContactNotifyListener = function (params) { return cordova(this, "removeContactNotifyListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addMessageRetractListener = function (params) { return cordova(this, "addMessageRetractListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeMessageRetractListener = function (params) { return cordova(this, "removeMessageRetractListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addReceiveTransCommandListener = function (params) { return cordova(this, "addReceiveTransCommandListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeReceiveTransCommandListener = function (params) { return cordova(this, "removeReceiveTransCommandListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addReceiveChatRoomMessageListener = function (params) { return cordova(this, "addReceiveChatRoomMessageListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeReceiveChatRoomMessageListener = function (params) { return cordova(this, "removeReceiveChatRoomMessageListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addReceiveApplyJoinGroupApprovalListener = function (params) { return cordova(this, "addReceiveApplyJoinGroupApprovalListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeReceiveApplyJoinGroupApprovalListener = function (params) { return cordova(this, "removeReceiveApplyJoinGroupApprovalListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addReceiveGroupAdminRejectListener = function (params) { return cordova(this, "addReceiveGroupAdminRejectListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeReceiveGroupAdminRejectListener = function (params) { return cordova(this, "removeReceiveGroupAdminRejectListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.addReceiveGroupAdminApprovalListener = function (params) { return cordova(this, "addReceiveGroupAdminApprovalListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    JMessagePluginOriginal.prototype.removeReceiveGroupAdminApprovalListener = function (params) { return cordova(this, "removeReceiveGroupAdminApprovalListener", { "sync": true, "platforms": ["iOS", "Android"] }, arguments); };
    Object.defineProperty(JMessagePluginOriginal.prototype, "ChatRoom", {
        get: function () { return cordovaPropertyGet(this, "ChatRoom"); },
        set: function (value) { cordovaPropertySet(this, "ChatRoom", value); },
        enumerable: true,
        configurable: true
    });
    JMessagePluginOriginal.pluginName = "JMessagePlugin";
    JMessagePluginOriginal.plugin = "jmessage-phonegap-plugin";
    JMessagePluginOriginal.pluginRef = "JMessage";
    JMessagePluginOriginal.repo = "https://github.com/jpush/jmessage-phonegap-plugin";
    JMessagePluginOriginal.install = "cordova plugin add jmessage-phonegap-plugin --variable APP_KEY=your_app_key";
    JMessagePluginOriginal.installVariables = ["APP_KEY"];
    JMessagePluginOriginal.platforms = ["Android", "iOS"];
    return JMessagePluginOriginal;
}(IonicNativePlugin));
var JMessagePlugin = new JMessagePluginOriginal();
export { JMessagePlugin };
//# sourceMappingURL=data:application/json;base64,